import java.util.*;
import java.lang.Math;
public class knapsack
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n = sc.nextInt();
        int w = sc.nextInt();
        int[] wt =new int[n];
        for(int i=0;i<n;i++)
        {
            wt[i]=sc.nextInt();
        }
        int[] val =new int[n];
        for(int i=0;i<n;i++)
        {
            val[i]=sc.nextInt();
        }
        
        int[][] mat = new int[n + 1][w + 1];
        //Base case
        for (int r = 0; r < w + 1; r++) 
        {
            mat[0][r] = 0;
        }
        for (int c = 0; c < n + 1; c++) 
        {
            mat[c][0] = 0;
        }
        for (int item = 1; item <= n; item++) 
        {
            for (int capacity = 1; capacity <= w; capacity++) 
            {
                int maxValWithoutCurr = mat[item - 1][capacity]; // This is guaranteed to exist
                int maxValWithCurr = 0; // We initialize this value to 0
                int weightOfCurr = wt[item - 1]; // We use item -1 to account for the extra row at the top
                if (capacity >= weightOfCurr) 
                { // We check if the knapsack can fit the current item
                    maxValWithCurr = val[item - 1]; // If so, maxValWithCurr is at least the value of the current item
                    int remainingCapacity = capacity - weightOfCurr; // remainingCapacity must be at least 0
                    maxValWithCurr += mat[item - 1][remainingCapacity]; // Add the maximum value obtainable with the remaining capacity
                }
                mat[item][capacity] = Math.max(maxValWithoutCurr, maxValWithCurr); // Pick the larger of the two
            }
        }
        System.out.println(mat[n][w]); // Final answer
        System.out.println(Arrays.deepToString(mat)+"\n"); // Visualization of the table
    }
}
#Rijushree Guha
